package handlers
import (
	"encoding/json"
	"fmt"
	"net/http"
	"pgproxy/internal/utils"
)
type CreateParams struct {
	TableName string   `json:"table_name"`
	Columns   []string `json:"columns"`
	Values    []string `json:"values"`
}
func CreateRecord(w http.ResponseWriter, r *http.Request) {
	if isValidMethod := utils.CheckHttpMethod(w, r); !isValidMethod {
		fmt.Println("CreateRecord(): method is not valide")
		return
	}
	params, err := decodeCreateRequest(r)
	if err != nil {
		utils.ErrorResponse(w, http.StatusBadRequest, err.Error())
		return
	}
	if err = validateCreateRecord(params); err != nil {
		utils.ErrorResponse(w, http.StatusBadRequest, err.Error())
		return
	}
}
func decodeCreateRequest(r *http.Request) (*CreateParams, error) {
	defer r.Body.Close()
	if r.Body == nil {
		err := fmt.Errorf("empty request body")
		return nil, err
	}
	var params CreateParams
	if err := json.NewDecoder(r.Body).Decode(&params); err != nil {
		err := fmt.Errorf("failed to decode request body: %w", err)
		return nil, err
	}
	return &params, nil
}
func validateCreateRecord(params *CreateParams) error {
	if params.TableName == "" {
		err := fmt.Errorf("table_name is required")
		return err
	}
	if len(params.Columns) == 0 || len(params.Values) == 0 {
		err := fmt.Errorf("columns and values are required")
		return err
	}
	if len(params.Columns) != len(params.Values) {
		err := fmt.Errorf("number of columns and values must be equal")
		return err
	}
	for i, column := range params.Columns {
		if column == "" {
			return fmt.Errorf("column at index %d is empty", i)
		}
	}
	for i, value := range params.Values {
		if value == "" {
			return fmt.Errorf("value at index %d is empty", i)
		}
	}
	return nil
}
